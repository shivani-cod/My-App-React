{"version":3,"sources":["components/Alert.js","components/BhootForm.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","BhootForm","useState","text","setText","style","color","mode","heading","value","onChange","event","target","backgroundColor","area","id","rows","button","onClick","newText","showAlert","replace","trim","document","getElementById","select","navigator","clipboard","writeText","split","length","Navbar","href","title","class","for","toggleMode","greenMode","yellowMode","defaultProps","aboutText","App","setMode","setAlert","btn","setbtn","setArea","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.66a815cc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n      const lower = word.toLowerCase();\r\n      return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n\r\n    return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong> {capitalize (props.alert.type)}</strong>:{props.alert.msg}\r\n       \r\n        </div>\r\n    )\r\n}\r\n","import React ,{useState} from 'react'\r\n\r\n\r\n\r\nexport default function BhootForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\",\"success\");\r\n\r\n    }\r\n\r\n    const whiteSpace = ()=>{\r\n        let newText = text.replace(/\\s+/g,' ').trim();\r\n        setText(newText)\r\n        props.showAlert(\"Removed all extra spaces\",\"success\");\r\n    }\r\n\r\n    \r\n    const Clear =()=>{\r\n        let newText =(\"\");\r\n        setText(newText)\r\n        props.showAlert(\"Textarea is cleared\",\"success\");\r\n    }\r\n\r\n    const Copy = ()=>{\r\n        var newText = document.getElementById(\"Writehere\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value)\r\n        props.showAlert(\"Text are copied \",\"success\")\r\n        \r\n       \r\n    }\r\n\r\n   \r\n     \r\n\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\",\"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'light' ? '#564102':'white'}}>\r\n\r\n        <h1 >{props.heading} </h1>  \r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'light' ? 'white':props.area,color: props.mode === 'light' ? '#564102':'white'}}  id=\"Writehere\" rows=\"6\"></textarea>\r\n        </div>\r\n        <button className={`btn btn-${props.button} mx-3  `} onClick={handleUpClick} >Convert to UpperCase</button>\r\n        <button className={`btn btn-${props.button} mx-3  `} onClick={handleLoClick}>Convert to LowerCase</button>\r\n        <button className={`btn btn-${props.button} mx-3  `} onClick={whiteSpace}>Extra space</button>\r\n        <button className={`btn btn-${props.button} mx-3  `} onClick={Clear}>Clear</button>\r\n        <button className={`btn btn-${props.button} mx-3  `} onClick={Copy}>Copy</button>\r\n        </div>  \r\n        <div className=\"container my-4\" style={{color: props.mode === 'light' ? '#564102':'white'}} >\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length} Words  {text.length} Characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to Read.</p>\r\n            <p>{text.split(\". \").length - 1} No. of Sentences.</p>\r\n\r\n           \r\n            <h3>Preview:-</h3>\r\n            <p>{text.length>0?text:\"Enter the something above in the textbox to get preview\"}</p>\r\n           \r\n            </div>   \r\n\r\n</>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n  <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n        </li> */}\r\n      </ul>\r\n      <div class=\"mx-3\">\r\n  <label for=\"formGroupExampleInput\" className=\"form-label\" style={{color: props.mode === 'light' ? '#564102':'white'}}>Modes to Enable</label>\r\n  </div>\r\n     \r\n      <div className={`form-check form-switch mx-2 text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n      <input id=\"btn2\" className=\"toggle-round  toggle-round-blue mx-2\" type=\"checkbox\" onClick={props.toggleMode}  />\r\n<label for=\"btn2\"></label>\r\n  </div>\r\n  \r\n  <div className=\"mx-2\">\r\n  <input id=\"cb_id\" className=\"toggle-round  toggle-round-green \" type=\"checkbox\" onClick={props.greenMode}  />\r\n<label for=\"cb_id\"></label>\r\n </div>\r\n <div className=\"mx-2\">\r\n  <input id=\"btn\" className=\"toggle-round  toggle-round-yellow mx-2 \" type=\"checkbox\" onClick={props.yellowMode}  ></input>\r\n<label for=\"btn\"></label>\r\n </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        \r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps ={\r\n    title:'set title',\r\n    aboutText:'About Us'\r\n};","\nimport  React,{ useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n//import AboutUs from './components/AboutUs';\nimport BhootForm from './components/BhootForm';\nimport Navbar from './components/Navbar';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  const [mode , setMode] = useState('light');\n  const [alert , setAlert] = useState(null);\n  const [btn , setbtn]=useState('warning');\n  const [area,setArea]=useState('grey')\n\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n\n    },1500);\n  }\n    const toggleMode = ()=>{\n    if(mode ==='light'){\n      setbtn('primary')\n      setMode('dark');\n      setArea('grey')\n      document.body.style.backgroundColor = '#280256';\n      showAlert(\"DarkMode has been enabled\",\"success\");\n      document.title = \"My App - Dark Mode\" \n    }else{\n      setbtn('info')\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"LightMode has been enabled\",\"success\")\n    }\n  }\n\n  const greenMode = ()=>{\n    if(mode ==='light' ||'dark'){\n      setbtn('warning');\n      setArea('#059d57')\n      setMode('dark');\n      document.body.style.backgroundColor = '#0e462c';\n      showAlert(\"GreenMode has been enabled\",\"success\");\n    }\n  }\n\n  const yellowMode = ()=>{\n    if(mode ==='light'|| 'dark'){\n      setbtn('dark');\n      setArea('#d6a71e')\n      setMode('dark');\n      document.body.style.backgroundColor = '#564102';\n      showAlert(\"YellowMode has been enabled\",\"success\");\n   \n    }\n  }\n\n\n  return (\n    \n    <>\n     <Navbar title=\"MyApp\" mode={mode}  toggleMode={toggleMode} greenMode={greenMode} yellowMode={yellowMode}/>\n  <Alert alert={alert}/>\n  <div className=\"container my-3\">\n  <BhootForm heading=\"Enter the text below\" mode={mode} showAlert={showAlert}  button={btn} area={area}  />\n  </div>\n    {/* <Router>\n  <Navbar title=\"MyApp\" mode={mode}  toggleMode={toggleMode} greenMode={greenMode} yellowMode={yellowMode}/>\n  <Alert alert={alert}/>\n  <div className=\"container my-3\">\n  <Switch>\n    {/* /user-->compo1\n    /users/comp2 */}\n          {/* <Route exact path=\"/about\">\n            <AboutUs />\n          </Route>\n          <Route exact path=\"/\">\n          <BhootForm heading=\"Enter the text below\" mode={mode} showAlert={showAlert}  button={btn} area={area}  />\n          </Route>\n        </Switch> */}\n  \n  \n  \n  {/* </div>\n  </Router> */} \n\n \n  </>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}